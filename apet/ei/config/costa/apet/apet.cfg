<app>
  <appinfo>
    <acronym>Test case generation (aPET)</acronym>
    <title>Test case generation (aPET)</title>
  <desc>
    <short>May Test Case Generator</short>
    <long>May Test Case Generator</long>
  </desc>
  </appinfo>
  <execinfo method="cmdline">
<cmdlineapp>./costa/apet/apet.sh _ei_files -entries _ei_outline _ei_parameters -apet_output apet_ei -inter_table yes -exec_graph yes -mode apet
</cmdlineapp>
  </execinfo>

<parameters prefix = "-" check="false"><br/> 
<selectone name="num_or_const" widget="combo"> 
<default value="num"> 
</default>
<desc> 
<short> 
Concrete test-cases or path-constraints</short>
<long> 
The result of each feasible execution path can be given in the form of a concrete test-case or path-constraints. Hybrid obtains concrete functional data and path constraints over numeric variables</long>
</desc>
<option value="num"> 
<desc> 
<short> 
Concrete tests</short>
<long> 
Concrete test-cases</long>
</desc>
</option>
<option value="constraint"> 
<desc> 
<short> 
Path constraints</short>
<long> 
Path constraints</long>
</desc>
</option>
<option value="abs_fterms"> 
<desc> 
<short> 
Hybrid</short>
<long> 
Numeric constraints + concrete functional data</long>
</desc>
</option>
</selectone>

<textfield name="data_domain"> 
<initialtext>-10..10</initialtext>
<desc> 
<short> 
Range of numbers</short>
<long> 
Range of numbers for concrete test-cases. Only applied in case concrete test-cases are generated. You should write "none" or "Inf..Sup", where Inf is the minimum value and Sup is the maximum value. </long>
</desc>
</textfield>

<selectone name="obj_sel_policy" widget="combo">
<default value="nondet">
</default>
<desc>
<short>
Object selection policy</short>
<long>
Round-robin is deterministic. In the non-deterministic policy, the active objects are selected non-deterministically on backtracking. In case partial-order-reduction is enabled only those producing non-redundant executions are selected.
</long>
</desc>
<option value="circular">
<desc>
<short>
Round-robin</short>
<long>
Round-robin selection policy</long>
</desc>
</option>
<option value="nondet"> 
<desc>
<short>
Non-deterministic</short>
<long>
Active objects are selected non-deterministically on backtracking.
             In case partial-order-reduction is enabled only those producing non-redundant executions are selected.
</long>
</desc>
</option>
</selectone>

<selectone name="sched" widget="combo"> 
<default value="nondet"> 
</default>
<desc> 
<short> 
Task scheduling policy</short>
<long> 
Intra-object task scheduling policy. FIFO and LIFO are deterministic. In the non-deterministic all active tasks are selected non-deterministically on backtracking</long>
</desc>
<option value="fifo"> 
<desc> 
<short> 
FIFO</short>
<long> 
FIFO scheduling policy</long>
</desc>
</option>
<option value="lifo"> 
<desc> 
<short> 
LIFO</short>
<long> 
LIFO scheduling policy</long>
</desc>
</option>
<option value="nondet"> 
<desc> 
<short> 
Non-deterministic</short>
<long> 
All active tasks are selected non-deterministically on backtracking</long>
</desc>
</option>
</selectone>

<selectone name="por" widget="combo"> 
<default value="fields"> 
</default>
<desc> 
<short> 
Partial-order reduction</short>
<long> 
Simple POR only applies object selection based on stability. Aggressive POR applies object selection based on stability and a more precise dependency over-approximation based on shared-memory accesses.</long>
</desc>
<option value="no"> 
<desc> 
<short> 
None</short>
<long> 
None</long>
</desc>
</option>
<option value="actor"> 
<desc> 
<short> 
Naive dep. approx</short>
<long> 
DPOR with naive dependency over-approximation. Currently it only applies object selection based on stability.</long>
</desc>
</option>
<option value="fields"> 
<desc> 
<short> 
Shared memory dep.</short>
<long> 
DPOR with syntactic dependency over approximation based on shared-memory accesses. </long>
</desc>
</option>
</selectone>


<textfield name="kl"> 
<initialtext> 
1</initialtext>
<desc> 
<short> 
Termination crit.: Loop iterations</short>
<long> 
Termination Criterion: Maximum number of loop iterations or (sync) recursive calls. Reasonable limits range from 1 to 3. Bigger numbers can produce state explosion.</long>
</desc>
</textfield>

<textfield name="ks"> 
<initialtext> 
8</initialtext>
<desc> 
<short> 
Termination crit.: Task switchings per object</short>
<long> 
Termination criterion: Maximum number of task switchings per object. Reasonable limits range from 3 to 12. Bigger numbers can produce state explosion.</long>
</desc>
</textfield>

<textfield name="kpp"> 
<initialtext> 
2</initialtext>
<desc> 
<short> 
Termination crit.: Objects originated per program point</short>
<long> 
Termination criterion: Maximum number of fresh objects originated per program point. Reasonable numbers range from 1 to 5. Bigger numbers can produce state explosion.</long>
</desc>
</textfield>

<textfield name="timeout"> 
<initialtext> 
10</initialtext>
<desc> 
<short> 
Global timeout (seconds)</short>
<long> 
Global timeout in seconds</long>
</desc>
</textfield>

</parameters> 

         </app>
