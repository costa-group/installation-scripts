<app>
  <appinfo>
    <acronym>Systematic testing (SYCO)</acronym>
    <title>Systematic testing (SYCO)</title>
  <desc>
    <short>May Test Case Generator</short>
    <long>May Test Case Generator</long>
  </desc>
  </appinfo>
  <execinfo method="cmdline">
 <cmdlineapp>./costa/syco/syco.sh _ei_files -entry _ei_outline _ei_parameters -exec_graph yes -apet_output apetx_ei -mode syco
</cmdlineapp>
  </execinfo>
<parameters prefix = "-" check="false"><br/> 

<selectone name="obj_sel_policy" widget="combo"> 
<default value="nondet"> 
</default>
<desc> 
<short> 
Object selection policy</short>
<long> 
Round-robin is deterministic. In the non-deterministic policy, the active objects are selected non-deterministically on backtracking. In case partial-order-reduction is enabled only those producing non-redundant executions are selected.</long>
</desc>
<option value="circular"> 
<desc> 
<short> 
Round-robin</short>
<long> 
Round-robin selection policy</long>
</desc>
</option>
<option value="nondet"> 
<desc> 
<short> 
Non-deterministic</short>
<long> 
Active objects are selected non-deterministically on backtracking.
	     In case partial-order-reduction is enabled only those producing non-redundant executions are selected.</long>
</desc>
</option>
</selectone>

<selectone name="sched" widget="combo"> 
<default value="nondet"> 
</default>
<desc> 
<short> 
Task scheduling policy</short>
<long> 
Intra-object task scheduling policy. FIFO and LIFO are deterministic. In the non-deterministic all active tasks are selected non-deterministically on backtracking</long>
</desc>
<option value="fifo"> 
<desc> 
<short> 
FIFO</short>
<long> 
FIFO scheduling policy</long>
</desc>
</option>
<option value="lifo"> 
<desc> 
<short> 
LIFO</short>
<long> 
LIFO scheduling policy</long>
</desc>
</option>
<option value="nondet"> 
<desc> 
<short> 
Non-deterministic</short>
<long> 
All active tasks are selected non-deterministically on backtracking</long>
</desc>
</option>
</selectone>

<selectone name="por" widget="combo"> 
<default value="fields"> 
</default>
<desc> 
<short> 
Partial-order reduction</short>
<long> 
Simple POR only applies object selection based on stability. Aggressive POR applies object selection based on stability and a more precise dependency over-approximation based on shared-memory accesses.
</long>
</desc>
<option value="no"> 
<desc> 
<short> 
None</short>
<long> 
None</long>
</desc>
</option>
<option value="actor"> 
<desc> 
<short> 
Naive dep. approx</short>
<long> 
DPOR with naive dependency over-approximation. Currently it only applies object selection based on stability.</long>
</desc>
</option>
<option value="fields"> 
<desc> 
<short> 
Shared memory dep.</short>
<long> 
DPOR with syntactic dependency over approximation based on shared-memory accesses. </long>
</desc>
</option>
<option value="exact"> 
<desc> 
<short> 
Exact dep.</short>
<long> 
DPOR with dynamic and context-sensitive exact dependency detection. Not valid in symbolic execution.</long>
</desc>
</option>
</selectone>



<selectone name="deadlock_guided" widget="combo"> 
<default value="no"> 
</default>
<desc> 
<short> 
Deadlock Guided Testing</short>
<long> 
Concrete execution of programs using static information of deadlock cycles</long>
</desc>
<option value="yes"> 
<desc> 
<short> 
Yes</short>
<long> 
Yes</long>
</desc>
</option>
<option value="no"> 
<desc> 
<short> 
No</short>
<long> 
No</long>
</desc>
</option>
</selectone>

<textfield name="timeout"> 
<initialtext>
10</initialtext>
<desc>
<short>
Global timeout (seconds)</short>
<long>
Global timeout in seconds</long>
</desc>
</textfield>

</parameters> 

         </app>
